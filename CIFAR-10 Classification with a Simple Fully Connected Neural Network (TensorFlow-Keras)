import tensorflow as tf, numpy as np, matplotlib.pyplot as plt
from tensorflow.keras import datasets, layers, models

(x_train, y_train), (x_test, y_test) = datasets.cifar10.load_data()
x_train, x_test = x_train.reshape(-1, 3072)/255.0, x_test.reshape(-1, 3072)/255.0
train_ds = tf.data.Dataset.from_tensor_slices((x_train, y_train)).shuffle(50000).batch(64).prefetch(tf.data.AUTOTUNE)
test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(64).prefetch(tf.data.AUTOTUNE)
classes = ['Airplane','Car','Bird','Cat','Deer','Dog','Frog','Horse','Ship','Truck']

model = models.Sequential([
    layers.Dense(512, activation='relu', input_shape=(3072,)),
    layers.Dense(256, activation='relu'),
    layers.Dense(10)
])
model.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])
model.fit(train_ds, epochs=10, validation_data=test_ds, verbose=2)
print("Test Acc:", model.evaluate(test_ds, verbose=0)[1])

p_model = tf.keras.Sequential([model, layers.Softmax()])
imgs, lbls = next(iter(test_ds)); preds = p_model.predict(imgs, verbose=0)
plt.figure(figsize=(10,4))
for i in range(5):
    plt.subplot(1,5,i+1); plt.imshow(imgs[i].numpy().reshape(32,32,3))
    p, t = classes[np.argmax(preds[i])], classes[int(lbls[i])]
    plt.title(p, color=('green' if p==t else 'red')); plt.axis('off')
plt.show()
