#CIFAR-10 Classification with a Simple Fully Connected Neural Network (TensorFlow/Keras)
import numpy as np
import tensorflow as tf
from tensorflow.keras import datasets, models, layers
import matplotlib.pyplot as plt

(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()

train_images = train_images.reshape((train_images.shape[0], -1)) / 255.0
test_images = test_images.reshape((test_images.shape[0], -1)) / 255.0

class_names = ['Airplane', 'Car', 'Bird', 'Cat', 'Deer',
 'Dog', 'Frog', 'Horse', 'Ship', 'Truck']

model = models.Sequential([
 layers.Dense(512, activation='relu', input_shape=(3072,)),
 layers.Dense(256, activation='relu'),
 layers.Dense(10)
])

model.compile(
 optimizer='adam',
 loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
 metrics=['accuracy']
)

model.fit(
 train_images, train_labels,
 epochs=10,
 batch_size=64,
 validation_data=(test_images, test_labels),
 verbose=2
)

test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2)
print(f"Test accuracy: {test_acc:.2f}")

probability_model = tf.keras.Sequential([model, tf.keras.layers.Softmax()])
predictions = probability_model.predict(test_images, verbose=0)
print(f"Predicted label: {class_names[np.argmax(predictions[0])]} | "
 f"True label: {class_names[test_labels[0][0]]}")

num_images_to_show = 5
plt.figure(figsize=(10, 5))
for i in range(num_images_to_show):
 plt.subplot(1, num_images_to_show, i + 1)
 plt.xticks([])
 plt.yticks([])
 plt.grid(False)

 plt.imshow(test_images[i].reshape(32, 32, 3))
 pred_label = class_names[np.argmax(predictions[i])]
 true_label = class_names[test_labels[i][0]]

 color = 'green' if pred_label == true_label else 'red'
 plt.title(pred_label, color=color)
 plt.xlabel(f"True: {true_label}")
plt.tight_layout()
plt.show()
