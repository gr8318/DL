import numpy as np
np.random.seed(42)

X = np.array([[0,0],[0,1],[1,0],[1,1]])
y = np.array([0,1,1,0]).reshape(-1,1)

W1, b1 = np.random.randn(2,4)*np.sqrt(2/2), np.zeros((1,4))
W2, b2 = np.random.randn(4,1)*np.sqrt(2/4), np.zeros((1,1))

def sigmoid(z): return 1/(1+np.exp(-z))
def forward(X): 
    z1, a1 = X@W1 + b1, np.maximum(0, X@W1 + b1)
    z2, a2 = a1@W2 + b2, sigmoid(a1@W2 + b2)
    return z1, a1, z2, a2

for epoch in range(1000):
    z1,a1,z2,a2 = forward(X)
    dz2 = a2 - y
    dW2, db2 = a1.T@dz2/4, np.sum(dz2,0,keepdims=True)/4
    dz1 = dz2@W2.T*(z1>0)
    dW1, db1 = X.T@dz1/4, np.sum(dz1,0,keepdims=True)/4
    W1, b1, W2, b2 = W1-0.1*dW1, b1-0.1*db1, W2-0.1*dW2, b2-0.1*db2
    if epoch%100==0:
        loss=-np.mean(y*np.log(a2+1e-8)+(1-y)*np.log(1-a2+1e-8))
        print(f"Epoch {epoch}, Loss: {loss:.4f}")

pred = (forward(X)[3]>=0.5).astype(int)
for i in range(4): print(f"Input:{X[i]} Pred:{pred[i][0]} Actual:{y[i][0]}")
