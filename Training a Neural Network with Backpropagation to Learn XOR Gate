#Training a Neural Network with Backpropagation to Learn XOR Gate
import numpy as np

def sigmoid(x):
 return 1 / (1 + np.exp(-x))
def sigmoid_derivative(x):
 return x * (1 - x)

X = np.array([[0, 0],
 [0, 1],
 [1, 0],
 [1, 1]])
y = np.array([[0], [1], [1], [0]])

input_layer_neurons = 2
hidden_layer_neurons = 2
output_neurons = 1
learning_rate = 0.1
epochs = 10000

np.random.seed(42)
wh = np.random.uniform(size=(input_layer_neurons, hidden_layer_neurons))
bh = np.random.uniform(size=(1, hidden_layer_neurons))
wo = np.random.uniform(size=(hidden_layer_neurons, output_neurons))
bo = np.random.uniform(size=(1, output_neurons))

for epoch in range(epochs):

 hidden_input = np.dot(X, wh) + bh
 hidden_output = sigmoid(hidden_input)
 final_input = np.dot(hidden_output, wo) + bo
 predicted_output = sigmoid(final_input)

 error = y - predicted_output
 d_predicted_output = error * sigmoid_derivative(predicted_output)
 error_hidden_layer = d_predicted_output.dot(wo.T)
 d_hidden_layer = error_hidden_layer * sigmoid_derivative(hidden_output)

 wo += hidden_output.T.dot(d_predicted_output) * learning_rate
 bo += np.sum(d_predicted_output, axis=0, keepdims=True) * learning_rate
 wh += X.T.dot(d_hidden_layer) * learning_rate
 bh += np.sum(d_hidden_layer, axis=0, keepdims=True) * learning_rate

print("Final output after training:")
print(np.round(predicted_output, 3))
