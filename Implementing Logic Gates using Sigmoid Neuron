#Implementing Logic Gates using Sigmoid Neuron
import numpy as np

def sigmoid(z):
 return 1 / (1 + np.exp(-z))

def and_gate(x1, x2):
 w1, w2, b = 0.5, 0.5, -0.8
 z = w1 * x1 + w2 * x2 + b
 return 1 if sigmoid(z) > 0.5 else 0

def not_gate(x):
   w, b = -1, 0.5
   z = w * x + b
   return 1 if sigmoid(z) > 0.5 else 0

def or_gate(x1, x2):
 w1, w2, b = 0.5, 0.5, -0.3
 z = w1 * x1 + w2 * x2 + b
 return 1 if sigmoid(z) > 0.5 else 0

print("--- AND Gate ---")
print(f"AND(0, 0) = {and_gate(0, 0)}")
print(f"AND(0, 1) = {and_gate(0, 1)}")
print(f"AND(1, 0) = {and_gate(1, 0)}")
print(f"AND(1, 1) = {and_gate(1, 1)}")
print("-" * 20)
print("--- OR Gate ---")
print(f"OR(0, 0) = {or_gate(0, 0)}")
print(f"OR(0, 1) = {or_gate(0, 1)}")
print(f"OR(1, 0) = {or_gate(1, 0)}")
print(f"OR(1, 1) = {or_gate(1, 1)}")
print("-" * 20)
print("--- NOT Gate ---")
print(f"NOT(0) = {not_gate(0)}")
print(f"NOT(1) = {not_gate(1)}")
print("-" * 20)
