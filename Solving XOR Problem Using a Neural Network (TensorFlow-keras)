#Solving XOR Problem Using a Neural Network (TensorFlow/Keras)
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam

X = np.array([[0, 0],
 [0, 1],
 [1, 0],
 [1, 1]], dtype=np.float32)
y = np.array([0, 1, 1, 0], dtype=np.float32)

model = Sequential([
 Dense(4, activation='relu', input_shape=(2,)),
 Dense(1, activation='sigmoid')
])

model.compile(optimizer=Adam(learning_rate=0.1),
 loss='binary_crossentropy',
 metrics=['accuracy'])

print("Training progress:")
history = model.fit(X, y, epochs=1000, verbose=0)

for i in range(0, 1000, 100):
 loss, acc = history.history['loss'][i], history.history['accuracy'][i]
 print(f"Epoch {i}: loss = {loss:.4f}, accuracy = {acc:.4f}")

predictions = model.predict(X)
predicted_classes = (predictions > 0.5).astype(int)
print("\nFinal Predictions:")
for i in range(len(X)):
 print((f"Input: {X[i]}, Predicted: {predicted_classes[i][0]} "
  f"(prob: {predictions[i][0]:.4f}), Actual: {y[i]}"))

print("\nModel architecture:")
model.summary()
